#include <WiFi.h>
#include <PubSubClient.h>

//https://github.com/knolleary/pubsubclient/issues/334

// Replace with your network credentials (STATION)
const char* ssid = "Yolanda TM";
const char* password =  "yolanda0803";
const char* mqttServer = "192.168.43.9";
const int mqttPort = 1883;
String y, U;
long j = 0;

WiFiClient espClient;
PubSubClient client(espClient);

//  MARVELMIND HEDGEHOG RELATED PART

long hedgehog_x, hedgehog_y;// coordinates of hedgehog (X,Y), mm
long hedgehog_z;// height of hedgehog, mm
int hedgehog_pos_updated;// flag of new data from hedgehog received

bool high_resolution_mode;

// IMU sensors raw data
int16_t imu_acc_x, imu_acc_y, imu_acc_z;
int16_t imu_gyro_x, imu_gyro_y, imu_gyro_z;
int16_t imu_compass_x, imu_compass_y, imu_compass_z;
int imu_updated;

///

#define HEDGEHOG_BUF_SIZE 40
#define HEDGEHOG_CM_DATA_SIZE 0x10
#define HEDGEHOG_MM_DATA_SIZE 0x16
#define HEDGEHOG_RAW_IMU_DATA_SIZE 0x20
byte hedgehog_serial_buf[HEDGEHOG_BUF_SIZE];
byte hedgehog_serial_buf_ofs;

#define POSITION_DATAGRAM_ID 0x0001
#define POSITION_DATAGRAM_HIGHRES_ID 0x0011
#define RAW_IMU_DATAGRAM_ID 0x0003
unsigned int hedgehog_data_id;

typedef union {
  byte b[2];
  unsigned int w;
  int wi;
} uni_8x2_16;
typedef union {
  byte b[4];
  float f;
  unsigned long v32;
  long vi32;
} uni_8x4_32;

//    Marvelmind hedgehog support initialize
void setup_hedgehog()
{
  Serial2.begin(500000); // hedgehog transmits data on 500 kbps

  hedgehog_serial_buf_ofs = 0;
  hedgehog_pos_updated = 0;

  imu_updated = 0;
}

// Marvelmind hedgehog service loop
void loop_hedgehog()
{ int incoming_byte;
  int total_received_in_loop;
  int packet_received;
  bool good_byte;
  byte packet_size;
  uni_8x2_16 un16;
  uni_8x4_32 un32;

  total_received_in_loop = 0;
  packet_received = 0;

  while (Serial2.available() > 0)
  {
    if (hedgehog_serial_buf_ofs >= HEDGEHOG_BUF_SIZE)
    {
      hedgehog_serial_buf_ofs = 0; // restart bufer fill
      break;// buffer overflow
    }
    total_received_in_loop++;
    if (total_received_in_loop > 100) break; // too much data without required header

    incoming_byte = Serial2.read();
    good_byte = false;
    switch (hedgehog_serial_buf_ofs)
    {
      case 0:
        {
          good_byte = (incoming_byte = 0xff);
          break;
        }
      case 1:
        {
          good_byte = (incoming_byte = 0x47);
          break;
        }
      case 2:
        {
          good_byte = true;
          break;
        }
      case 3:
        {
          hedgehog_data_id = (((unsigned int) incoming_byte) << 8) + hedgehog_serial_buf[2];
          good_byte =   (hedgehog_data_id == POSITION_DATAGRAM_ID) ||
                        (hedgehog_data_id == POSITION_DATAGRAM_HIGHRES_ID) ||
                        (hedgehog_data_id == RAW_IMU_DATAGRAM_ID);
          break;
        }
      case 4:
        {
          switch (hedgehog_data_id)
          {
            case POSITION_DATAGRAM_ID:
              {
                good_byte = (incoming_byte == HEDGEHOG_CM_DATA_SIZE);
                break;
              }
            case POSITION_DATAGRAM_HIGHRES_ID:
              {
                good_byte = (incoming_byte == HEDGEHOG_MM_DATA_SIZE);
                break;
              }
            case RAW_IMU_DATAGRAM_ID:
              {
                good_byte = (incoming_byte == HEDGEHOG_RAW_IMU_DATA_SIZE);
                break;
              }
          }
          break;
        }
      default:
        {
          good_byte = true;
          break;
        }
    }

    if (!good_byte)
    {
      hedgehog_serial_buf_ofs = 0; // restart bufer fill
      continue;
    }
    hedgehog_serial_buf[hedgehog_serial_buf_ofs++] = incoming_byte;
    if (hedgehog_serial_buf_ofs > 5)
    {
      packet_size =  7 + hedgehog_serial_buf[4];
      if (hedgehog_serial_buf_ofs == packet_size)
      { // received packet with required header
        packet_received = 1;
        hedgehog_serial_buf_ofs = 0; // restart bufer fill
        break;
      }
    }
  }

  if (packet_received)
  {
    hedgehog_set_crc16(&hedgehog_serial_buf[0], packet_size);// calculate CRC checksum of packet
    if ((hedgehog_serial_buf[packet_size] == 0) && (hedgehog_serial_buf[packet_size + 1] == 0))
    { // checksum success
      switch (hedgehog_data_id)
      {
        case POSITION_DATAGRAM_ID:
          {
            // coordinates of hedgehog (X,Y), cm ==> mm
            un16.b[0] = hedgehog_serial_buf[9];
            un16.b[1] = hedgehog_serial_buf[10];
            hedgehog_x = 10 * long(un16.wi);

            un16.b[0] = hedgehog_serial_buf[11];
            un16.b[1] = hedgehog_serial_buf[12];
            hedgehog_y = 10 * long(un16.wi);

            // height of hedgehog, cm==>mm (FW V3.97+)
            un16.b[0] = hedgehog_serial_buf[13];
            un16.b[1] = hedgehog_serial_buf[14];
            hedgehog_z = 10 * long(un16.wi);

            hedgehog_pos_updated = 1; // flag of new data from hedgehog received
            high_resolution_mode = false;
            break;
          }

        case POSITION_DATAGRAM_HIGHRES_ID:
          {
            // coordinates of hedgehog (X,Y), mm
            un32.b[0] = hedgehog_serial_buf[9];
            un32.b[1] = hedgehog_serial_buf[10];
            un32.b[2] = hedgehog_serial_buf[11];
            un32.b[3] = hedgehog_serial_buf[12];
            hedgehog_x = un32.vi32;

            un32.b[0] = hedgehog_serial_buf[13];
            un32.b[1] = hedgehog_serial_buf[14];
            un32.b[2] = hedgehog_serial_buf[15];
            un32.b[3] = hedgehog_serial_buf[16];
            hedgehog_y = un32.vi32;

            // height of hedgehog, mm
            un32.b[0] = hedgehog_serial_buf[17];
            un32.b[1] = hedgehog_serial_buf[18];
            un32.b[2] = hedgehog_serial_buf[19];
            un32.b[3] = hedgehog_serial_buf[20];
            hedgehog_z = un32.vi32;

            hedgehog_pos_updated = 1; // flag of new data from hedgehog received
            high_resolution_mode = true;
            break;
          }

        case RAW_IMU_DATAGRAM_ID:
          {
            un16.b[0] = hedgehog_serial_buf[5];
            un16.b[1] = hedgehog_serial_buf[6];
            imu_acc_x = un16.wi;

            un16.b[0] = hedgehog_serial_buf[7];
            un16.b[1] = hedgehog_serial_buf[8];
            imu_acc_y = un16.wi;

            un16.b[0] = hedgehog_serial_buf[9];
            un16.b[1] = hedgehog_serial_buf[10];
            imu_acc_z = un16.wi;

            //

            un16.b[0] = hedgehog_serial_buf[11];
            un16.b[1] = hedgehog_serial_buf[12];
            imu_gyro_x = un16.wi;

            un16.b[0] = hedgehog_serial_buf[13];
            un16.b[1] = hedgehog_serial_buf[14];
            imu_gyro_y = un16.wi;

            un16.b[0] = hedgehog_serial_buf[15];
            un16.b[1] = hedgehog_serial_buf[16];
            imu_gyro_z = un16.wi;

            //

            un16.b[0] = hedgehog_serial_buf[17];
            un16.b[1] = hedgehog_serial_buf[18];
            imu_compass_x = un16.wi;

            un16.b[0] = hedgehog_serial_buf[19];
            un16.b[1] = hedgehog_serial_buf[20];
            imu_compass_y = un16.wi;

            un16.b[0] = hedgehog_serial_buf[21];
            un16.b[1] = hedgehog_serial_buf[22];
            imu_compass_z = un16.wi;

            imu_updated = 1;

            break;
          }
      }
    }
  }
}

// Calculate CRC-16 of hedgehog packet
void hedgehog_set_crc16(byte *buf, byte size)
{ uni_8x2_16 sum;
  byte shift_cnt;
  byte byte_cnt;

  sum.w = 0xffffU;

  for (byte_cnt = size; byte_cnt > 0; byte_cnt--)
  {
    sum.w = (unsigned int) ((sum.w / 256U) * 256U + ((sum.w % 256U) ^ (buf[size - byte_cnt])));

    for (shift_cnt = 0; shift_cnt < 8; shift_cnt++)
    {
      if ((sum.w & 0x1) == 1) sum.w = (unsigned int)((sum.w >> 1) ^ 0xa001U);
      else sum.w >>= 1;
    }
  }

  buf[size] = sum.b[0];
  buf[size + 1] = sum.b[1]; // little endian
}// hedgehog_set_crc16

void setup() {
  // put your setup code here, to run once:
  delay(10);
  Serial.begin(115200);
  // We start by connecting to a WiFi network
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  setup_hedgehog();
  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());

  client.setServer(mqttServer, mqttPort);
  client.setCallback(callback);
}

void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Attempt to connect
    if (client.connect("ESP8266Client")) {
      Serial.println("connected");
      // Subscribe
      client.subscribe("topik ah");
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}

void callback(char* topic, byte* message, unsigned int length) {
  Serial.print("Message arrived on topic: ");
  Serial.print(topic);
  Serial.print(". Message: ");
  U = "";
  y = (char)message[0];
  for (int i = 1; i < length; i++) {
    Serial.print((char)message[i]);
    U += (char)message[i];
  }
  Serial.println();
}

void loop() {
  // put your main code here, to run repeatedly:
  {
    if (!client.connected()) {
      reconnect();
      Serial.println("not connected");
    }
    if (client.connect("ESP8266Client"))
    {
      //client.publish("coba/intopic", "MQTT is connected");
      //Serial.println("connected");
      if (millis() - j >= 500) {
        String gabungan = String(hedgehog_x) + "," + String(hedgehog_y) + "," + String(millis());
        client.publish("coba/intopic", gabungan.c_str());
        client.subscribe("topic/test");
        j = millis();
      }
      client.loop();
      Serial.println(U);
    }
  }
}
